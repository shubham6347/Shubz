pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'shubham6384/shubhz'
        DOCKER_TAG = 'latest'
        SSH_KEY = 'path/to/your/ssh-key.pem' // Update with your actual SSH key path
        INSTANCE_IP = '' // This will be updated dynamically
    }
    stages {
        stage("Git Checkout") {
            steps {
                git branch: 'Shubham', credentialsId: '6f889412-ec96-4a71-9aac-f0aebbe5e24c', url: 'https://github.com/shubham6347/Shubz'
            }
        }
        stage("Initialize Terraform") {
            steps {
                dir('terraform') {
                    sh 'terraform init'
                }
            }
        }
        stage("Apply Terraform") {
            steps {
                dir('terraform') {
                    sh 'terraform apply -auto-approve'
                }
            }
            post {
                success {
                    script {
                        INSTANCE_IP = sh(script: 'cd terraform && terraform output -raw instance_ip', returnStdout: true).trim()
                        env.INSTANCE_IP = INSTANCE_IP // Update the environment variable
                    }
                }
            }
        }
        stage("Build Docker Image") {
            steps {
                sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
            }
        }
        stage("Push Docker Image") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'f220ce06-94b9-4851-82d8-87ba30c03c3f', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    sh "echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin"
                    sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }
        stage("Run Docker Container on EC2") {
            steps {
                script {
                    sh """
                    ssh -o StrictHostKeyChecking=no -i ${SSH_KEY} ec2-user@${INSTANCE_IP} '
                        sudo yum update -y
                        sudo amazon-linux-extras install docker -y
                        sudo service docker start
                        sudo usermod -a -G docker ec2-user
                        docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}
                        docker run -d -p 8000:80 --name web-app-container ${DOCKER_IMAGE}:${DOCKER_TAG}
                    '
                    """
                }
            }
        }
        stage("Verify Container") {
            steps {
                script {
                    sh "ssh -o StrictHostKeyChecking=no -i ${SSH_KEY} ec2-user@${INSTANCE_IP} 'docker ps | grep web-app-container'"
                }
            }
        }
    }
}
